{
  "collection": {
    "_": {
      "postman_id": "f8880bee-9d98-48ad-9476-90c885004309"
    },
    "item": [
      {
        "id": "74d2774f-f737-4bc2-96aa-ec6ea65b463a",
        "name": "Create User",
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "users"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Test User API\",\n  \"email\": \"apitest@example.com\",\n  \"password\": \"password123\",\n  \"nic\": \"123456789V\",\n  \"country\": \"Sri Lanka\",\n  \"gender\": \"Male\",\n  \"language\": \"English\"\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "1ad41df7-bb90-4f8f-a261-2fc7e5d69028",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"Status 200, 201, 400, or 500\", () => {",
                "    pm.expect([200, 201, 400, 500]).to.include(pm.response.code);",
                "});",
                "",
                "if (pm.response.code === 200 || pm.response.code === 201) {",
                "    pm.test(\"Has user object on success\", () => {",
                "        const body = pm.response.json();",
                "        pm.expect(body).to.have.property(\"user\");",
                "    });",
                "} else if (pm.response.code === 400) {",
                "    pm.test(\"Has error message on validation failure\", () => {",
                "        const body = pm.response.json();",
                "        pm.expect(body).to.have.property(\"message\");",
                "    });",
                "} else if (pm.response.code === 500) {",
                "    pm.test(\"Server error handled gracefully\", () => {",
                "        console.log('Server error - check database connection');",
                "        pm.expect(pm.response.code).to.equal(500);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "75358351-a7b9-42ac-88a9-2213effdbd62"
            }
          }
        ]
      },
      {
        "id": "bab1807d-b631-40ec-9d5a-34c1d5bc03a2",
        "name": "Login User",
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "users",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"apitest@example.com\",\n  \"password\": \"password123\"\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "3f671d79-55c6-4ba3-a2d7-a2c8214d22ce",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"Status 200, 401, or 500\", () => {",
                "    pm.expect([200, 401, 500]).to.include(pm.response.code);",
                "});",
                "",
                "if (pm.response.code === 200) {",
                "    pm.test(\"Has token on success\", () => {",
                "        const body = pm.response.json();",
                "        pm.expect(body).to.have.property(\"token\");",
                "    });",
                "} else if (pm.response.code === 401) {",
                "    pm.test(\"Has error message on auth failure\", () => {",
                "        const body = pm.response.json();",
                "        pm.expect(body).to.have.property(\"message\");",
                "    });",
                "} else if (pm.response.code === 500) {",
                "    pm.test(\"Server error handled gracefully\", () => {",
                "        console.log('Server error during login');",
                "        pm.expect(pm.response.code).to.equal(500);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "ceb5ac93-7aa7-4e0f-ac63-b9360102844c"
            }
          }
        ]
      },
      {
        "id": "7d635d35-c08d-4a59-9551-f53378f5c5bd",
        "name": "Get All Users",
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "users"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "8208e0dc-0483-4911-8dd3-336ba1560382",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"Status 200 or 401\", () => {",
                "    pm.expect([200, 401]).to.include(pm.response.code);",
                "});",
                "",
                "if (pm.response.code === 200) {",
                "    pm.test(\"Has users data on success\", () => {",
                "        const body = pm.response.json();",
                "        pm.expect(body).to.have.property(\"users\");",
                "        pm.expect(body.success).to.be.true;",
                "    });",
                "} else if (pm.response.code === 401) {",
                "    pm.test(\"Authentication required (security working)\", () => {",
                "        const body = pm.response.json();",
                "        pm.expect(body).to.have.property(\"message\");",
                "    });",
                "}"
              ],
              "_lastExecutionId": "5dcfdd99-2866-41c4-82d3-ff025665c1a8"
            }
          }
        ]
      }
    ],
    "event": [],
    "variable": [],
    "info": {
      "_postman_id": "f8880bee-9d98-48ad-9476-90c885004309",
      "name": "API testing - Corrected",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "id": "0b9d9b64-033f-4dd8-8954-7ccb39bc813e",
    "values": []
  },
  "globals": {
    "id": "974b39c7-e8c4-4546-93b7-2291d8712c13",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 3,
        "pending": 0,
        "failed": 3
      },
      "tests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 3,
        "pending": 0,
        "failed": 3
      },
      "testScripts": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1756051146992,
      "completed": 1756051147291
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 3,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "69f43fd0-6a66-4554-a31a-d7c5518c9a02",
          "httpRequestId": "92ad3358-3f28-46c8-a3a0-799a8882c174"
        },
        "item": {
          "id": "74d2774f-f737-4bc2-96aa-ec6ea65b463a",
          "name": "Create User",
          "request": {
            "url": {
              "protocol": "http",
              "port": "5000",
              "path": [
                "users"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test User API\",\n  \"email\": \"apitest@example.com\",\n  \"password\": \"password123\",\n  \"nic\": \"123456789V\",\n  \"country\": \"Sri Lanka\",\n  \"gender\": \"Male\",\n  \"language\": \"English\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1ad41df7-bb90-4f8f-a261-2fc7e5d69028",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status 200, 201, 400, or 500\", () => {",
                  "    pm.expect([200, 201, 400, 500]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Has user object on success\", () => {",
                  "        const body = pm.response.json();",
                  "        pm.expect(body).to.have.property(\"user\");",
                  "    });",
                  "} else if (pm.response.code === 400) {",
                  "    pm.test(\"Has error message on validation failure\", () => {",
                  "        const body = pm.response.json();",
                  "        pm.expect(body).to.have.property(\"message\");",
                  "    });",
                  "} else if (pm.response.code === 500) {",
                  "    pm.test(\"Server error handled gracefully\", () => {",
                  "        console.log('Server error - check database connection');",
                  "        pm.expect(pm.response.code).to.equal(500);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "75358351-a7b9-42ac-88a9-2213effdbd62"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "users"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e5882ca9-6256-4471-8b0b-c64914b8c784",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Test User API\",\n  \"email\": \"apitest@example.com\",\n  \"password\": \"password123\",\n  \"nic\": \"123456789V\",\n  \"country\": \"Sri Lanka\",\n  \"gender\": \"Male\",\n  \"language\": \"English\"\n}"
          }
        },
        "id": "74d2774f-f737-4bc2-96aa-ec6ea65b463a",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 5000
        },
        "assertions": [
          {
            "assertion": "Status 200, 201, 400, or 500",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status 200, 201, 400, or 500",
              "message": "expected [ 200, 201, 400, 500 ] to include undefined",
              "stack": "AssertionError: expected [ 200, 201, 400, 500 ] to include undefined\n   at Object.eval sandbox-script.js:1:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "4c5202fc-e8f2-4662-8f04-4779f007e140",
          "length": 3,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a99a5722-a52e-4877-a97e-61b5b63636a4"
        },
        "item": {
          "id": "bab1807d-b631-40ec-9d5a-34c1d5bc03a2",
          "name": "Login User",
          "request": {
            "url": {
              "protocol": "http",
              "port": "5000",
              "path": [
                "users",
                "login"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"apitest@example.com\",\n  \"password\": \"password123\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3f671d79-55c6-4ba3-a2d7-a2c8214d22ce",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status 200, 401, or 500\", () => {",
                  "    pm.expect([200, 401, 500]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Has token on success\", () => {",
                  "        const body = pm.response.json();",
                  "        pm.expect(body).to.have.property(\"token\");",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test(\"Has error message on auth failure\", () => {",
                  "        const body = pm.response.json();",
                  "        pm.expect(body).to.have.property(\"message\");",
                  "    });",
                  "} else if (pm.response.code === 500) {",
                  "    pm.test(\"Server error handled gracefully\", () => {",
                  "        console.log('Server error during login');",
                  "        pm.expect(pm.response.code).to.equal(500);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "ceb5ac93-7aa7-4e0f-ac63-b9360102844c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "users",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a1e75d5a-d54a-4e6d-b507-e94b04f579c9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"apitest@example.com\",\n  \"password\": \"password123\"\n}"
          }
        },
        "id": "bab1807d-b631-40ec-9d5a-34c1d5bc03a2",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 5000
        },
        "assertions": [
          {
            "assertion": "Status 200, 401, or 500",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status 200, 401, or 500",
              "message": "expected [ 200, 401, 500 ] to include undefined",
              "stack": "AssertionError: expected [ 200, 401, 500 ] to include undefined\n   at Object.eval sandbox-script.js:1:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "0e14a9c3-89a4-4ff4-beeb-450959459f73",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "71772b4a-39ff-407c-80ba-55440fbad708"
        },
        "item": {
          "id": "7d635d35-c08d-4a59-9551-f53378f5c5bd",
          "name": "Get All Users",
          "request": {
            "url": {
              "protocol": "http",
              "port": "5000",
              "path": [
                "users"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8208e0dc-0483-4911-8dd3-336ba1560382",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status 200 or 401\", () => {",
                  "    pm.expect([200, 401]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Has users data on success\", () => {",
                  "        const body = pm.response.json();",
                  "        pm.expect(body).to.have.property(\"users\");",
                  "        pm.expect(body.success).to.be.true;",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test(\"Authentication required (security working)\", () => {",
                  "        const body = pm.response.json();",
                  "        pm.expect(body).to.have.property(\"message\");",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "5dcfdd99-2866-41c4-82d3-ff025665c1a8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "users"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b5c8318e-741a-4bfb-8f7a-8424d84e4284",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "7d635d35-c08d-4a59-9551-f53378f5c5bd",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 5000
        },
        "assertions": [
          {
            "assertion": "Status 200 or 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status 200 or 401",
              "message": "expected [ 200, 401 ] to include undefined",
              "stack": "AssertionError: expected [ 200, 401 ] to include undefined\n   at Object.eval sandbox-script.js:1:3)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 0
    },
    "failures": [
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 5000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:5000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:5000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "7841e00afcc5b8aa40f2c70eee78df5b",
          "id": "a1aab6e0-8fc3-4fc2-91f1-5cf9ea8bb74a",
          "timestamp": 1756051147097,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "74d2774f-f737-4bc2-96aa-ec6ea65b463a",
          "name": "Create User",
          "request": {
            "url": {
              "protocol": "http",
              "port": "5000",
              "path": [
                "users"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "e5882ca9-6256-4471-8b0b-c64914b8c784",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:5000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test User API\",\n  \"email\": \"apitest@example.com\",\n  \"password\": \"password123\",\n  \"nic\": \"123456789V\",\n  \"country\": \"Sri Lanka\",\n  \"gender\": \"Male\",\n  \"language\": \"English\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1ad41df7-bb90-4f8f-a261-2fc7e5d69028",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status 200, 201, 400, or 500\", () => {",
                  "    pm.expect([200, 201, 400, 500]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Has user object on success\", () => {",
                  "        const body = pm.response.json();",
                  "        pm.expect(body).to.have.property(\"user\");",
                  "    });",
                  "} else if (pm.response.code === 400) {",
                  "    pm.test(\"Has error message on validation failure\", () => {",
                  "        const body = pm.response.json();",
                  "        pm.expect(body).to.have.property(\"message\");",
                  "    });",
                  "} else if (pm.response.code === 500) {",
                  "    pm.test(\"Server error handled gracefully\", () => {",
                  "        console.log('Server error - check database connection');",
                  "        pm.expect(pm.response.code).to.equal(500);",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 3,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "69f43fd0-6a66-4554-a31a-d7c5518c9a02",
          "httpRequestId": "92ad3358-3f28-46c8-a3a0-799a8882c174"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status 200, 201, 400, or 500",
          "message": "expected [ 200, 201, 400, 500 ] to include undefined",
          "stack": "AssertionError: expected [ 200, 201, 400, 500 ] to include undefined\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "e8fe5801c407f09ac8535ae72b0f7147",
          "id": "5049dacc-939e-4265-9c07-b158591fe820",
          "timestamp": 1756051147132,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "74d2774f-f737-4bc2-96aa-ec6ea65b463a",
          "name": "Create User",
          "request": {
            "url": {
              "protocol": "http",
              "port": "5000",
              "path": [
                "users"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test User API\",\n  \"email\": \"apitest@example.com\",\n  \"password\": \"password123\",\n  \"nic\": \"123456789V\",\n  \"country\": \"Sri Lanka\",\n  \"gender\": \"Male\",\n  \"language\": \"English\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1ad41df7-bb90-4f8f-a261-2fc7e5d69028",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status 200, 201, 400, or 500\", () => {",
                  "    pm.expect([200, 201, 400, 500]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test(\"Has user object on success\", () => {",
                  "        const body = pm.response.json();",
                  "        pm.expect(body).to.have.property(\"user\");",
                  "    });",
                  "} else if (pm.response.code === 400) {",
                  "    pm.test(\"Has error message on validation failure\", () => {",
                  "        const body = pm.response.json();",
                  "        pm.expect(body).to.have.property(\"message\");",
                  "    });",
                  "} else if (pm.response.code === 500) {",
                  "    pm.test(\"Server error handled gracefully\", () => {",
                  "        console.log('Server error - check database connection');",
                  "        pm.expect(pm.response.code).to.equal(500);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "75358351-a7b9-42ac-88a9-2213effdbd62"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "f8880bee-9d98-48ad-9476-90c885004309"
          },
          "item": [
            {
              "id": "74d2774f-f737-4bc2-96aa-ec6ea65b463a",
              "name": "Create User",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "5000",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test User API\",\n  \"email\": \"apitest@example.com\",\n  \"password\": \"password123\",\n  \"nic\": \"123456789V\",\n  \"country\": \"Sri Lanka\",\n  \"gender\": \"Male\",\n  \"language\": \"English\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ad41df7-bb90-4f8f-a261-2fc7e5d69028",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status 200, 201, 400, or 500\", () => {",
                      "    pm.expect([200, 201, 400, 500]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test(\"Has user object on success\", () => {",
                      "        const body = pm.response.json();",
                      "        pm.expect(body).to.have.property(\"user\");",
                      "    });",
                      "} else if (pm.response.code === 400) {",
                      "    pm.test(\"Has error message on validation failure\", () => {",
                      "        const body = pm.response.json();",
                      "        pm.expect(body).to.have.property(\"message\");",
                      "    });",
                      "} else if (pm.response.code === 500) {",
                      "    pm.test(\"Server error handled gracefully\", () => {",
                      "        console.log('Server error - check database connection');",
                      "        pm.expect(pm.response.code).to.equal(500);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "75358351-a7b9-42ac-88a9-2213effdbd62"
                  }
                }
              ]
            },
            {
              "id": "bab1807d-b631-40ec-9d5a-34c1d5bc03a2",
              "name": "Login User",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "5000",
                  "path": [
                    "users",
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"apitest@example.com\",\n  \"password\": \"password123\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3f671d79-55c6-4ba3-a2d7-a2c8214d22ce",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status 200, 401, or 500\", () => {",
                      "    pm.expect([200, 401, 500]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Has token on success\", () => {",
                      "        const body = pm.response.json();",
                      "        pm.expect(body).to.have.property(\"token\");",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test(\"Has error message on auth failure\", () => {",
                      "        const body = pm.response.json();",
                      "        pm.expect(body).to.have.property(\"message\");",
                      "    });",
                      "} else if (pm.response.code === 500) {",
                      "    pm.test(\"Server error handled gracefully\", () => {",
                      "        console.log('Server error during login');",
                      "        pm.expect(pm.response.code).to.equal(500);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ceb5ac93-7aa7-4e0f-ac63-b9360102844c"
                  }
                }
              ]
            },
            {
              "id": "7d635d35-c08d-4a59-9551-f53378f5c5bd",
              "name": "Get All Users",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "5000",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8208e0dc-0483-4911-8dd3-336ba1560382",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status 200 or 401\", () => {",
                      "    pm.expect([200, 401]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Has users data on success\", () => {",
                      "        const body = pm.response.json();",
                      "        pm.expect(body).to.have.property(\"users\");",
                      "        pm.expect(body.success).to.be.true;",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test(\"Authentication required (security working)\", () => {",
                      "        const body = pm.response.json();",
                      "        pm.expect(body).to.have.property(\"message\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "5dcfdd99-2866-41c4-82d3-ff025665c1a8"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "f8880bee-9d98-48ad-9476-90c885004309",
            "name": "API testing - Corrected",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 3,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "69f43fd0-6a66-4554-a31a-d7c5518c9a02",
          "httpRequestId": "92ad3358-3f28-46c8-a3a0-799a8882c174",
          "scriptId": "1ad41df7-bb90-4f8f-a261-2fc7e5d69028",
          "execution": "75358351-a7b9-42ac-88a9-2213effdbd62"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 5000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:5000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:5000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "7841e00afcc5b8aa40f2c70eee78df5b",
          "id": "b793fede-9c45-4695-b21a-8b659ad8d72f",
          "timestamp": 1756051147176,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "bab1807d-b631-40ec-9d5a-34c1d5bc03a2",
          "name": "Login User",
          "request": {
            "url": {
              "protocol": "http",
              "port": "5000",
              "path": [
                "users",
                "login"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "a1e75d5a-d54a-4e6d-b507-e94b04f579c9",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:5000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"apitest@example.com\",\n  \"password\": \"password123\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3f671d79-55c6-4ba3-a2d7-a2c8214d22ce",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status 200, 401, or 500\", () => {",
                  "    pm.expect([200, 401, 500]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Has token on success\", () => {",
                  "        const body = pm.response.json();",
                  "        pm.expect(body).to.have.property(\"token\");",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test(\"Has error message on auth failure\", () => {",
                  "        const body = pm.response.json();",
                  "        pm.expect(body).to.have.property(\"message\");",
                  "    });",
                  "} else if (pm.response.code === 500) {",
                  "    pm.test(\"Server error handled gracefully\", () => {",
                  "        console.log('Server error during login');",
                  "        pm.expect(pm.response.code).to.equal(500);",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "4c5202fc-e8f2-4662-8f04-4779f007e140",
          "length": 3,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a99a5722-a52e-4877-a97e-61b5b63636a4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status 200, 401, or 500",
          "message": "expected [ 200, 401, 500 ] to include undefined",
          "stack": "AssertionError: expected [ 200, 401, 500 ] to include undefined\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "48ab74327f04afa772ca0b05869fb5e5",
          "id": "42ad31c1-32fb-4869-ac49-6f0164d6c0c1",
          "timestamp": 1756051147192,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "bab1807d-b631-40ec-9d5a-34c1d5bc03a2",
          "name": "Login User",
          "request": {
            "url": {
              "protocol": "http",
              "port": "5000",
              "path": [
                "users",
                "login"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"apitest@example.com\",\n  \"password\": \"password123\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3f671d79-55c6-4ba3-a2d7-a2c8214d22ce",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status 200, 401, or 500\", () => {",
                  "    pm.expect([200, 401, 500]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Has token on success\", () => {",
                  "        const body = pm.response.json();",
                  "        pm.expect(body).to.have.property(\"token\");",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test(\"Has error message on auth failure\", () => {",
                  "        const body = pm.response.json();",
                  "        pm.expect(body).to.have.property(\"message\");",
                  "    });",
                  "} else if (pm.response.code === 500) {",
                  "    pm.test(\"Server error handled gracefully\", () => {",
                  "        console.log('Server error during login');",
                  "        pm.expect(pm.response.code).to.equal(500);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "ceb5ac93-7aa7-4e0f-ac63-b9360102844c"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "f8880bee-9d98-48ad-9476-90c885004309"
          },
          "item": [
            {
              "id": "74d2774f-f737-4bc2-96aa-ec6ea65b463a",
              "name": "Create User",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "5000",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test User API\",\n  \"email\": \"apitest@example.com\",\n  \"password\": \"password123\",\n  \"nic\": \"123456789V\",\n  \"country\": \"Sri Lanka\",\n  \"gender\": \"Male\",\n  \"language\": \"English\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ad41df7-bb90-4f8f-a261-2fc7e5d69028",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status 200, 201, 400, or 500\", () => {",
                      "    pm.expect([200, 201, 400, 500]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test(\"Has user object on success\", () => {",
                      "        const body = pm.response.json();",
                      "        pm.expect(body).to.have.property(\"user\");",
                      "    });",
                      "} else if (pm.response.code === 400) {",
                      "    pm.test(\"Has error message on validation failure\", () => {",
                      "        const body = pm.response.json();",
                      "        pm.expect(body).to.have.property(\"message\");",
                      "    });",
                      "} else if (pm.response.code === 500) {",
                      "    pm.test(\"Server error handled gracefully\", () => {",
                      "        console.log('Server error - check database connection');",
                      "        pm.expect(pm.response.code).to.equal(500);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "75358351-a7b9-42ac-88a9-2213effdbd62"
                  }
                }
              ]
            },
            {
              "id": "bab1807d-b631-40ec-9d5a-34c1d5bc03a2",
              "name": "Login User",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "5000",
                  "path": [
                    "users",
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"apitest@example.com\",\n  \"password\": \"password123\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3f671d79-55c6-4ba3-a2d7-a2c8214d22ce",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status 200, 401, or 500\", () => {",
                      "    pm.expect([200, 401, 500]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Has token on success\", () => {",
                      "        const body = pm.response.json();",
                      "        pm.expect(body).to.have.property(\"token\");",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test(\"Has error message on auth failure\", () => {",
                      "        const body = pm.response.json();",
                      "        pm.expect(body).to.have.property(\"message\");",
                      "    });",
                      "} else if (pm.response.code === 500) {",
                      "    pm.test(\"Server error handled gracefully\", () => {",
                      "        console.log('Server error during login');",
                      "        pm.expect(pm.response.code).to.equal(500);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ceb5ac93-7aa7-4e0f-ac63-b9360102844c"
                  }
                }
              ]
            },
            {
              "id": "7d635d35-c08d-4a59-9551-f53378f5c5bd",
              "name": "Get All Users",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "5000",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8208e0dc-0483-4911-8dd3-336ba1560382",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status 200 or 401\", () => {",
                      "    pm.expect([200, 401]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Has users data on success\", () => {",
                      "        const body = pm.response.json();",
                      "        pm.expect(body).to.have.property(\"users\");",
                      "        pm.expect(body.success).to.be.true;",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test(\"Authentication required (security working)\", () => {",
                      "        const body = pm.response.json();",
                      "        pm.expect(body).to.have.property(\"message\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "5dcfdd99-2866-41c4-82d3-ff025665c1a8"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "f8880bee-9d98-48ad-9476-90c885004309",
            "name": "API testing - Corrected",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "4c5202fc-e8f2-4662-8f04-4779f007e140",
          "length": 3,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a99a5722-a52e-4877-a97e-61b5b63636a4",
          "scriptId": "3f671d79-55c6-4ba3-a2d7-a2c8214d22ce",
          "execution": "ceb5ac93-7aa7-4e0f-ac63-b9360102844c"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 5000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:5000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:5000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "7841e00afcc5b8aa40f2c70eee78df5b",
          "id": "7d1eb81a-e142-47d0-87f7-b3397ed0fa6a",
          "timestamp": 1756051147254,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "7d635d35-c08d-4a59-9551-f53378f5c5bd",
          "name": "Get All Users",
          "request": {
            "url": {
              "protocol": "http",
              "port": "5000",
              "path": [
                "users"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "b5c8318e-741a-4bfb-8f7a-8424d84e4284",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:5000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8208e0dc-0483-4911-8dd3-336ba1560382",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status 200 or 401\", () => {",
                  "    pm.expect([200, 401]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Has users data on success\", () => {",
                  "        const body = pm.response.json();",
                  "        pm.expect(body).to.have.property(\"users\");",
                  "        pm.expect(body.success).to.be.true;",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test(\"Authentication required (security working)\", () => {",
                  "        const body = pm.response.json();",
                  "        pm.expect(body).to.have.property(\"message\");",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "0e14a9c3-89a4-4ff4-beeb-450959459f73",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "71772b4a-39ff-407c-80ba-55440fbad708"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status 200 or 401",
          "message": "expected [ 200, 401 ] to include undefined",
          "stack": "AssertionError: expected [ 200, 401 ] to include undefined\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "44700a4b1e86b4635b79272617a10e9a",
          "id": "8a905153-3b79-4149-8a53-ae57903e995d",
          "timestamp": 1756051147264,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "7d635d35-c08d-4a59-9551-f53378f5c5bd",
          "name": "Get All Users",
          "request": {
            "url": {
              "protocol": "http",
              "port": "5000",
              "path": [
                "users"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8208e0dc-0483-4911-8dd3-336ba1560382",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status 200 or 401\", () => {",
                  "    pm.expect([200, 401]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Has users data on success\", () => {",
                  "        const body = pm.response.json();",
                  "        pm.expect(body).to.have.property(\"users\");",
                  "        pm.expect(body.success).to.be.true;",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test(\"Authentication required (security working)\", () => {",
                  "        const body = pm.response.json();",
                  "        pm.expect(body).to.have.property(\"message\");",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "5dcfdd99-2866-41c4-82d3-ff025665c1a8"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "f8880bee-9d98-48ad-9476-90c885004309"
          },
          "item": [
            {
              "id": "74d2774f-f737-4bc2-96aa-ec6ea65b463a",
              "name": "Create User",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "5000",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test User API\",\n  \"email\": \"apitest@example.com\",\n  \"password\": \"password123\",\n  \"nic\": \"123456789V\",\n  \"country\": \"Sri Lanka\",\n  \"gender\": \"Male\",\n  \"language\": \"English\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ad41df7-bb90-4f8f-a261-2fc7e5d69028",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status 200, 201, 400, or 500\", () => {",
                      "    pm.expect([200, 201, 400, 500]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test(\"Has user object on success\", () => {",
                      "        const body = pm.response.json();",
                      "        pm.expect(body).to.have.property(\"user\");",
                      "    });",
                      "} else if (pm.response.code === 400) {",
                      "    pm.test(\"Has error message on validation failure\", () => {",
                      "        const body = pm.response.json();",
                      "        pm.expect(body).to.have.property(\"message\");",
                      "    });",
                      "} else if (pm.response.code === 500) {",
                      "    pm.test(\"Server error handled gracefully\", () => {",
                      "        console.log('Server error - check database connection');",
                      "        pm.expect(pm.response.code).to.equal(500);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "75358351-a7b9-42ac-88a9-2213effdbd62"
                  }
                }
              ]
            },
            {
              "id": "bab1807d-b631-40ec-9d5a-34c1d5bc03a2",
              "name": "Login User",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "5000",
                  "path": [
                    "users",
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"apitest@example.com\",\n  \"password\": \"password123\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3f671d79-55c6-4ba3-a2d7-a2c8214d22ce",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status 200, 401, or 500\", () => {",
                      "    pm.expect([200, 401, 500]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Has token on success\", () => {",
                      "        const body = pm.response.json();",
                      "        pm.expect(body).to.have.property(\"token\");",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test(\"Has error message on auth failure\", () => {",
                      "        const body = pm.response.json();",
                      "        pm.expect(body).to.have.property(\"message\");",
                      "    });",
                      "} else if (pm.response.code === 500) {",
                      "    pm.test(\"Server error handled gracefully\", () => {",
                      "        console.log('Server error during login');",
                      "        pm.expect(pm.response.code).to.equal(500);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ceb5ac93-7aa7-4e0f-ac63-b9360102844c"
                  }
                }
              ]
            },
            {
              "id": "7d635d35-c08d-4a59-9551-f53378f5c5bd",
              "name": "Get All Users",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "5000",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8208e0dc-0483-4911-8dd3-336ba1560382",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status 200 or 401\", () => {",
                      "    pm.expect([200, 401]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Has users data on success\", () => {",
                      "        const body = pm.response.json();",
                      "        pm.expect(body).to.have.property(\"users\");",
                      "        pm.expect(body.success).to.be.true;",
                      "    });",
                      "} else if (pm.response.code === 401) {",
                      "    pm.test(\"Authentication required (security working)\", () => {",
                      "        const body = pm.response.json();",
                      "        pm.expect(body).to.have.property(\"message\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "5dcfdd99-2866-41c4-82d3-ff025665c1a8"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "f8880bee-9d98-48ad-9476-90c885004309",
            "name": "API testing - Corrected",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "0e14a9c3-89a4-4ff4-beeb-450959459f73",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "71772b4a-39ff-407c-80ba-55440fbad708",
          "scriptId": "8208e0dc-0483-4911-8dd3-336ba1560382",
          "execution": "5dcfdd99-2866-41c4-82d3-ff025665c1a8"
        }
      }
    ],
    "error": null
  }
}